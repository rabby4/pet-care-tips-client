/* eslint-disable @typescript-eslint/no-unused-vars */
"use client"
import { useState } from "react"
import { useForm } from "react-hook-form"
import { Input } from "@nextui-org/input"
import { Button } from "@nextui-org/button"
import { jsPDF } from "jspdf"
import { Card, CardBody } from "@nextui-org/card"

interface FormData {
	petType: string
	age: number
	weight: number
}

const calculateNutrition = (age: number, weight: number, petType: string) => {
	if (petType.toLowerCase() === "dog") {
		return {
			calories: weight * 30 + 70,
			protein: weight * 2,
		}
	} else if (petType.toLowerCase() === "cat") {
		return {
			calories: weight * 25 + 60,
			protein: weight * 1.5,
		}
	} else {
		return { calories: 0, protein: 0 }
	}
}

const Calculator = () => {
	const {
		register,
		handleSubmit,
		formState: { errors },
	} = useForm<FormData>()

	const [nutrition, setNutrition] = useState({ calories: 0, protein: 0 })

	const onSubmit = (data: FormData) => {
		const result = calculateNutrition(data.age, data.weight, data.petType)

		setNutrition(result)

		const doc = new jsPDF()

		doc.setFont("Inter", "normal")

		// Add a title
		doc.setFontSize(22)
		doc.setTextColor(40, 40, 40)
		doc.text(`Nutrition Report for ${data.petType} pet`, 10, 20)

		// Draw a line
		doc.setLineWidth(1)
		doc.line(10, 25, 200, 25)

		// Add the report details
		doc.setFontSize(14)
		doc.setTextColor(60, 60, 60)
		doc.text(`Age: ${data.age} years`, 10, 40)
		doc.text(`Weight: ${data.weight} kg`, 10, 50)
		doc.text(`Estimated Calories: ${result.calories} kcal/day`, 10, 60)
		doc.text(`Protein Needs: ${result.protein} g/day`, 10, 70)

		// Add a footer
		doc.setFontSize(10)
		doc.setTextColor(150, 150, 150)
		doc.text("Generated by Cirkel - Pet care tips and story community", 10, 280)

		// Save the PDF
		doc.save(`${data.petType}_nutrition_report.pdf`)
	}

	return (
		<>
			<div className="h-screen bg-nutrition bg-cover bg-no-repeat flex flex-col justify-center">
				<Card className="w-2/4 mx-auto">
					<CardBody className="p-10">
						<h1 className="text-center my-2 font-bold text-2xl"> Calculator</h1>
						<form
							className="flex flex-col space-y-6"
							onSubmit={handleSubmit(onSubmit)}
						>
							{/* Pet Type Dropdown */}
							<label className="text-sm font-medium" htmlFor="petType">
								Pet Type <span className="text-red-500">*</span>
							</label>
							<select
								{...register("petType", {
									required: "Please select a pet type.",
								})}
								className={`border p-2 ${errors.petType ? "border-red-500" : ""}`}
								defaultValue=""
								id="petType"
							>
								<option disabled value="">
									Select Pet Type
								</option>
								<option value="dog">Dog</option>
								<option value="cat">Cat</option>
							</select>
							{errors.petType && (
								<p className="text-red-500 text-xs">{errors.petType.message}</p>
							)}

							{/* Age Input */}
							<label className="text-sm font-medium" htmlFor="age">
								Pet Age (years) <span className="text-red-500">*</span>
							</label>
							<Input
								{...register("age", {
									required: "Age is required.",
									min: { value: 0, message: "Age must be at least 0." },
									max: {
										value: 30,
										message: "Age must be less than or equal to 30.",
									},
								})}
								required
								className={` p-2 ${errors.age ? "border-red-500" : ""}`}
								id="age"
								placeholder="Age in years"
								type="number"
							/>
							{errors.age && (
								<p className="text-red-500 text-xs">{errors.age.message}</p>
							)}

							{/* Weight Input */}
							<label className="text-sm font-medium" htmlFor="weight">
								Pet Weight (kg) <span className="text-red-500">*</span>
							</label>
							<Input
								{...register("weight", {
									required: "Weight is required.",
									min: {
										value: 0.5,
										message: "Weight must be at least 0.5 kg.",
									},
									max: {
										value: 100,
										message: "Weight must be less than or equal to 100 kg.",
									},
								})}
								required
								className={`p-2 ${errors.weight ? "border-red-500" : ""}`}
								id="weight"
								placeholder="Weight in kg"
								type="number"
							/>
							{errors.weight && (
								<p className="text-red-500 text-xs">{errors.weight.message}</p>
							)}

							{/* Submit Button */}
							<Button color="primary" className="rounded-md" type="submit">
								Download PDF
							</Button>
						</form>
					</CardBody>
				</Card>
			</div>
		</>
	)
}

export default Calculator
