"use client"
import { useState } from "react"
import { useForm } from "react-hook-form"
import { Input } from "@nextui-org/input"
import { Button } from "@nextui-org/button"
import { jsPDF } from "jspdf"
import Container from "../ui/Container"

interface FormData {
	petType: string
	age: number
	weight: number
}

const calculateNutrition = (age: number, weight: number, petType: string) => {
	if (petType.toLowerCase() === "dog") {
		return {
			calories: weight * 30 + 70,
			protein: weight * 2,
		}
	} else if (petType.toLowerCase() === "cat") {
		return {
			calories: weight * 25 + 60,
			protein: weight * 1.5,
		}
	} else {
		return { calories: 0, protein: 0 }
	}
}

const Calculator = () => {
	const {
		register,
		handleSubmit,
		formState: { errors },
	} = useForm<FormData>()

	const [nutrition, setNutrition] = useState({ calories: 0, protein: 0 })

	const onSubmit = (data: FormData) => {
		const result = calculateNutrition(data.age, data.weight, data.petType)

		setNutrition(result)

		const doc = new jsPDF()

		doc.setFont("Inter", "normal")

		// Add a title
		doc.setFontSize(22)
		doc.setTextColor(40, 40, 40)
		doc.text(`Nutrition Report for ${data.petType}`, 10, 20)

		// Draw a line
		doc.setLineWidth(1)
		doc.line(10, 25, 200, 25)

		// Add the report details
		doc.setFontSize(14)
		doc.setTextColor(60, 60, 60)
		doc.text(`Age: ${data.age} years`, 10, 40)
		doc.text(`Weight: ${data.weight} kg`, 10, 50)
		doc.text(`Estimated Calories: ${result.calories} kcal/day`, 10, 60)
		doc.text(`Protein Needs: ${result.protein} g/day`, 10, 70)

		// Add a footer
		doc.setFontSize(10)
		doc.setTextColor(150, 150, 150)
		doc.text("Generated by Your Pet Nutrition App", 10, 280)

		// Save the PDF
		doc.save(`${data.petType}_nutrition_report.pdf`)
	}

	return (
		<Container>
			<div className="flex flex-col lg:flex-row gap-5 justify-center">
				<div className="p-2 lg:p-6 lg:w-1/2 bg-white shadow-lg rounded-md">
					<h1 className="text-center my-2 font-bold text-2xl"> Calculator</h1>
					<form
						onSubmit={handleSubmit(onSubmit)}
						className="flex flex-col space-y-6 max-w-md mx-auto"
					>
						{/* Pet Type Dropdown */}
						<label htmlFor="petType" className="text-sm font-medium">
							Pet Type <span className="text-red-500">*</span>
						</label>
						<select
							{...register("petType", {
								required: "Please select a pet type.",
							})}
							id="petType"
							className={`border p-2 rounded ${errors.petType ? "border-red-500" : ""}`}
							defaultValue=""
						>
							<option value="" disabled>
								Select Pet Type
							</option>
							<option value="dog">Dog</option>
							<option value="cat">Cat</option>
						</select>
						{errors.petType && (
							<p className="text-red-500 text-xs">{errors.petType.message}</p>
						)}

						{/* Age Input */}
						<label htmlFor="age" className="text-sm font-medium">
							Pet Age (years) <span className="text-red-500">*</span>
						</label>
						<Input
							{...register("age", {
								required: "Age is required.",
								min: { value: 0, message: "Age must be at least 0." },
								max: {
									value: 30,
									message: "Age must be less than or equal to 30.",
								},
							})}
							type="number"
							placeholder="Age in years"
							id="age"
							className={`border p-2 rounded ${errors.age ? "border-red-500" : ""}`}
							required
						/>
						{errors.age && (
							<p className="text-red-500 text-xs">{errors.age.message}</p>
						)}

						{/* Weight Input */}
						<label htmlFor="weight" className="text-sm font-medium">
							Pet Weight (kg) <span className="text-red-500">*</span>
						</label>
						<Input
							{...register("weight", {
								required: "Weight is required.",
								min: { value: 0.5, message: "Weight must be at least 0.5 kg." },
								max: {
									value: 100,
									message: "Weight must be less than or equal to 100 kg.",
								},
							})}
							type="number"
							placeholder="Weight in kg"
							id="weight"
							className={`border p-2 rounded ${errors.weight ? "border-red-500" : ""}`}
							required
						/>
						{errors.weight && (
							<p className="text-red-500 text-xs">{errors.weight.message}</p>
						)}

						{/* Submit Button */}
						<Button type="submit" className="bg-[#148d8c] text-white">
							Download PDF
						</Button>
					</form>
				</div>

				<div className="lg:w-1/2 w-full">
					<div className="grid grid-cols-2 gap-1 p-2 md:grid-cols-3 lg:grid-cols-2">
						<div
							className="bg-center bg-no-repeat bg-cover aspect-auto rounded col-span-2 md:col-span-3"
							style={{
								backgroundImage:
									'url("https://img.freepik.com/premium-photo/cat-food-graphs_23-2151537804.jpg?w=826")',
								height: "350px",
							}}
						></div>

						<div
							className="bg-center bg-no-repeat bg-cover aspect-auto rounded"
							style={{
								backgroundImage:
									'url("https://img.freepik.com/premium-photo/happy-dog-posing-full-bowl-dry-food_695242-19744.jpg?w=1380")',
								height: "170px",
							}}
						></div>

						<div
							className="bg-center bg-no-repeat bg-cover aspect-auto rounded"
							style={{
								backgroundImage:
									'url("https://img.freepik.com/premium-photo/cat-food-graphs_23-2151537822.jpg?w=1380")',
								height: "170px",
							}}
						></div>
					</div>
				</div>
			</div>
		</Container>
	)
}

export default Calculator
